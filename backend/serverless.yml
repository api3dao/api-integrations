service: api-integrations-logging
useDotenv: true
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x

  httpApi:
    disableDefaultEndpoint: true
    id: ${env:HTTP_API_ID}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:Scan'
            - 'dynamodb:Query'

          Resource:
            - { 'Fn::GetAtt': ['TokenOwnerGroup', 'Arn'] }

  environment:
    API_KEYS: ${env:API_KEYS}
    GF_CLOUD_REGION: ${env:GF_CLOUD_REGION}
    GF_CLOUD_TOKEN: ${env:GF_CLOUD_TOKEN}
    GF_CLOUD_ACCESS_POLICY_ID: ${env:GF_CLOUD_ACCESS_POLICY_ID}
    GF_LOKI_USER: ${env:GF_LOKI_USER}
    GF_LOKI_ENDPOINT: ${env:GF_LOKI_ENDPOINT}

# package:
#   patterns:
#     - "!.build/**"
#     - "!.vscode/**"
#     - "!node_modules/**"
#     - "!test/**"

functions:
  POST_/grafanaLokiAccess:
    memorySize: 128
    handler: src/handlers.connectOrCreateGrafanaLokiAccess
    events:
      - httpApi:
          path: /grafanaLokiAccess
          method: post
  DELETE_/grafanaLokiAccess:
    memorySize: 128
    handler: src/handlers.deleteGrafanaLokiAccess
    events:
      - httpApi:
          path: /grafanaLokiAccess
          method: delete
  GET_/deploymentStatus:
    memorySize: 128
    handler: src/handlers.evaluateDeploymentStatus
    events:
      - httpApi:
          path: /deploymentStatus
          method: get

plugins:
  - serverless-plugin-typescript

resources:
  Resources:
    GrafanaLokiAccessRegistry:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: grafanaLokiAccessRegistry
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: airnode
            AttributeType: S
        KeySchema:
          - AttributeName: airnode
            KeyType: HASH
